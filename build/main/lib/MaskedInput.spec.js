"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const react_1 = __importDefault(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
const enzyme_adapter_react_16_1 = __importDefault(require("enzyme-adapter-react-16"));
const enzyme_1 = require("enzyme");
const MaskedInput_1 = __importDefault(require("./MaskedInput"));
const antd_1 = require("antd");
require('jsdom-global/register');
enzyme_1.configure({ adapter: new enzyme_adapter_react_16_1.default() });
ava_1.default.beforeEach(() => {
    react_dom_1.default.unmountComponentAtNode(document.body);
    document.body.innerText = '';
});
function mountComponent(props) {
    const component = react_1.default.createElement(MaskedInput_1.default, props);
    return enzyme_1.mount(component);
}
ava_1.default('should require mask', t => {
    t.throws(() => {
        mountComponent({});
    }, 'InputMask: you must provide a pattern.');
});
ava_1.default('should handle a masking workflow', t => {
    const input = mountComponent({ mask: '11/11', value: '123' }).getDOMNode();
    t.is(input.className, 'ant-input');
    t.is(input.value, '12/3_');
    t.is(input.placeholder, '__/__');
});
ava_1.default('should handle updating mask', t => {
    let defaultMask = '1111 1111 1111 1111';
    let amexMask = '1111 111111 11111';
    let component = mountComponent({ mask: defaultMask });
    let input = component.getDOMNode();
    t.deepEqual(input.value, '');
    t.is(input.placeholder, '____ ____ ____ ____');
    t.deepEqual(input.selectionStart, 0);
    component.setProps({ mask: amexMask });
    component.update();
    t.is(input.placeholder, '____ ______ _____');
    t.deepEqual(input.value, '');
    t.deepEqual(input.selectionStart, 0);
});
ava_1.default('should handle updating value', t => {
    let ref = null;
    let defaultMask = '1111 1111 1111 1111';
    function render(props) {
        react_dom_1.default.render(react_1.default.createElement(MaskedInput_1.default, Object.assign({}, props, { ref: r => (ref = r) })), document.body);
    }
    render({ mask: defaultMask, value: '' });
    let input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '');
    t.deepEqual(input.placeholder, '____ ____ ____ ____');
    t.deepEqual(input.selectionStart, 0);
    // update value
    render({ mask: defaultMask, value: '4111111111111111' });
    input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '4111 1111 1111 1111');
});
ava_1.default('should handle updating mask and value', t => {
    let ref = null;
    let defaultMask = '1111 1111 1111 1111';
    function render(props) {
        react_dom_1.default.render(react_1.default.createElement(MaskedInput_1.default, Object.assign({}, props, { ref: r => (ref = r) })), document.body);
    }
    render({ mask: defaultMask, value: '' });
    let input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '');
    t.deepEqual(input.placeholder, '____ ____ ____ ____');
    t.deepEqual(input.selectionStart, 0);
    // update value
    render({ mask: defaultMask, value: '4111111111111111' });
    input = react_dom_1.default.findDOMNode(ref);
    t.deepEqual(input.value, '4111 1111 1111 1111');
    render({ mask: '11/11/1111', value: '25091989' });
    input = react_dom_1.default.findDOMNode(ref);
    t.deepEqual(ref.state._Input.state.value, '25/09/1989');
    t.deepEqual(input.value, '25/09/1989');
});
ava_1.default('should remove leftover placeholder characters when switching to smaller mask', t => {
    let ref = null;
    let defaultMask = '1111 1111 1111 1111';
    let amexMask = '1111 111111 11111';
    let mask = defaultMask;
    let value = null;
    function render() {
        react_dom_1.default.render(react_1.default.createElement(MaskedInput_1.default, { mask, value, ref: r => (ref = r) }), document.body);
    }
    render();
    let input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '');
    t.deepEqual(input.placeholder, '____ ____ ____ ____');
    t.deepEqual(input.maxLength, 19);
    t.deepEqual(input.selectionStart, 0);
    mask = amexMask;
    value = '1234 123456 12345';
    render();
    input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '1234 123456 12345');
    t.deepEqual(input.maxLength, 17);
});
ava_1.default('cleans props from input', t => {
    let ref = null;
    let defaultMask = '1111 1111 1111 1111';
    function render(props) {
        react_dom_1.default.render(react_1.default.createElement(MaskedInput_1.default, Object.assign({}, props, { ref: r => (ref = r) })), document.body);
    }
    render({
        mask: defaultMask,
        value: '',
        placeholderChar: 'X',
        formatCharacters: { A: null }
    });
    let input = react_dom_1.default.findDOMNode(ref);
    t.deepEqual(input.getAttribute('placeholderChar'), null);
    t.deepEqual(input.getAttribute('formatCharacters'), null);
});
ava_1.default('should handle updating multiple values', t => {
    let ref = null;
    let defaultMask = '1111 1111 1111 1111';
    const mastercard = '5555555555554444';
    const visa = '4111111111111111';
    function render(props) {
        react_dom_1.default.render(react_1.default.createElement(MaskedInput_1.default, Object.assign({}, props, { ref: r => (ref = r) })), document.body);
    }
    render({ mask: defaultMask, value: '' });
    let input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '');
    t.deepEqual(input.placeholder, '____ ____ ____ ____');
    t.deepEqual(input.maxLength, 19);
    // update mask and value
    render({ mask: defaultMask, value: visa });
    input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '4111 1111 1111 1111');
    t.deepEqual(input.maxLength, 19);
    // update mask and value
    render({ mask: defaultMask, value: mastercard });
    input = react_dom_1.default.findDOMNode(ref);
    // initial state
    t.deepEqual(input.value, '5555 5555 5555 4444');
    t.deepEqual(input.maxLength, 19);
});
ava_1.default('should work with getFieldDecoretor', t => {
    let el = enzyme_1.mount(react_1.default.createElement(MyForm, { mask: '11/11/1111' }));
    let inputComponent = el.find('input');
    let input = inputComponent.getDOMNode();
    // initial state
    t.deepEqual(input.value, '');
    t.deepEqual(input.placeholder, '__/__/____');
    t.deepEqual(input.maxLength, 10);
    inputComponent.simulate('change', { target: { value: '2509190' } });
    input = inputComponent.getDOMNode();
    t.deepEqual(input.value, '25/09/190_');
    t.deepEqual(input.placeholder, '__/__/____');
    t.deepEqual(input.maxLength, 10);
    t.deepEqual(el.find('input').get(0).props.value, '25/09/190_');
});
class CustomComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.state = {};
        this.handleSubmit = (e) => {
            e.preventDefault();
            this.props.form.validateFields((error, values) => {
                this.setState({ error, values });
            });
        };
    }
    componentDidMount() {
        // To disabled submit button at the beginning.
        this.props.form.validateFields();
    }
    render() {
        const { getFieldDecorator } = this.props.form;
        return (react_1.default.createElement("form", { onSubmit: this.handleSubmit }, getFieldDecorator('masked', {
            rules: [{ required: true, message: 'fill' }]
        })(react_1.default.createElement(MaskedInput_1.default, { mask: this.props.mask }))));
    }
}
const MyForm = antd_1.Form.create({ name: 'horizontal_login' })(CustomComponent);
//# sourceMappingURL=data:application/json;base64,